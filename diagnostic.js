
var Column = require('./column');

let columns = [
	new Column([ 10, 12, 5, 1 ]),
	new Column([ 12, 5, 8, 2 ],),
	new Column([ 2, 6, 8, 7 ]),
	new Column([ 7, 5, 6, 8 ]),
	new Column([ 12, 7, 13, 6 ]),
	new Column([ 10, 1, 1, 13 ]),
	new Column([ 2, 10, 13, 3 ]),
	new Column([ 13, 3, 12, 6 ]),
	new Column([ 3, 8, 10, 3 ]),
	new Column([ 7, 2, 5, 1 ]),
	new Column([]),
	new Column([]),
]

let branch = [
	[[
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 3, 11 ], [ 0, 3 ],
		[ 7, 11 ], [ 7, 0 ],
		[ 6, 7 ],  [ 8, 7 ],
		[ 8, 5 ],  [ 1, 8 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 3, 11 ], [ 0, 3 ],
		[ 7, 11 ], [ 7, 0 ],
		[ 8, 7 ],  [ 8, 5 ],
		[ 6, 7 ],  [ 1, 8 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 3, 11 ], [ 0, 3 ],
		[ 7, 11 ], [ 7, 0 ],
		[ 8, 7 ],  [ 8, 5 ],
		[ 1, 8 ],  [ 6, 7 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 3, 11 ], [ 0, 3 ],
		[ 7, 11 ], [ 7, 0 ],
		[ 8, 7 ],  [ 6, 7 ],
		[ 8, 5 ],  [ 1, 8 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 3, 11 ], [ 7, 11 ],
		[ 0, 3 ],  [ 7, 0 ],
		[ 6, 7 ],  [ 8, 7 ],
		[ 8, 5 ],  [ 1, 8 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 3, 11 ], [ 7, 11 ],
		[ 0, 3 ],  [ 7, 0 ],
		[ 8, 7 ],  [ 8, 5 ],
		[ 6, 7 ],  [ 1, 8 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 3, 11 ], [ 7, 11 ],
		[ 0, 3 ],  [ 7, 0 ],
		[ 8, 7 ],  [ 8, 5 ],
		[ 1, 8 ],  [ 6, 7 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 3, 11 ], [ 7, 11 ],
		[ 0, 3 ],  [ 7, 0 ],
		[ 8, 7 ],  [ 6, 7 ],
		[ 8, 5 ],  [ 1, 8 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 7, 11 ], [ 3, 11 ],
		[ 0, 3 ],  [ 7, 0 ],
		[ 6, 7 ],  [ 8, 7 ],
		[ 8, 5 ],  [ 1, 8 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 7, 11 ], [ 3, 11 ],
		[ 0, 3 ],  [ 7, 0 ],
		[ 8, 7 ],  [ 8, 5 ],
		[ 6, 7 ],  [ 1, 8 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 7, 11 ], [ 3, 11 ],
		[ 0, 3 ],  [ 7, 0 ],
		[ 8, 7 ],  [ 8, 5 ],
		[ 1, 8 ],  [ 6, 7 ]
	  ]
	], [
	  [
		[ 12, 2, 3 ], [ 5, 1, 2 ],
		[ 7, 1, 4 ],  [ 5, 3, 4 ],
		[ 13, 2, 4 ], [ 10, 2, 2 ],
		[ 13, 1, 3 ], [ 3, 3, 4 ],
		[ 8, 3, 4 ],  [ 2, 2, 3 ],
		[ 1, 4, 4 ],  [ 6, 3, 3 ]
	  ],
	  [
		[ 0, 10 ], [ 9, 10 ],
		[ 9, 0 ],  [ 1, 9 ],
		[ 3, 1 ],  [ 4, 3 ],
		[ 5, 4 ],  [ 5, 10 ],
		[ 7, 11 ], [ 3, 11 ],
		[ 0, 3 ],  [ 7, 0 ],
		[ 8, 7 ],  [ 6, 7 ],
		[ 8, 5 ],  [ 1, 8 ]
	]]
];

function isDifferent(a,b){
	if(a[0] != b[0]){return true}
	if(a[1] != b[1]){return true}
	
	return false
}

let comuneBranch = branch[0][1];
	
for(let br =1;br<branch.length;br++){
	let thisBranch = [...branch[br][1]];
	
	console.log(thisBranch);
	
	for(mv in comuneBranch){
	
		if(isDifferent(comuneBranch[mv],thisBranch[mv])){
			
			comuneBranch.splice(mv, comuneBranch.length - mv);
						
			continue;
		}
	}

}

console.log("comuneBranch",comuneBranch.length);
console.log(comuneBranch);










